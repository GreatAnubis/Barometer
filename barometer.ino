/*

   barometer.ino - Piccolino Pressure & Temperature display using the BMP180 sensor add-on
   Visit http://piccolino.rocks to get this low cost sensor and add it to your Piccolino!
   
   This demo uses Sparkfun's SFE_BMP180 library ( https://github.com/sparkfun/BMP180_Breakout/tree/master/Libraries/Arduino/src )
   
   To install the library, make a folder called SFE_BMP180 in your ... Arduino/libraries 
   go into the folder and drop the SFE_BMP180.cpp and SFE_BMP180.h files. Restart the Arduino IDE and compile this demo.
   
   Written by Alex Sardo (wctek.com) for Piccolino -> http://piccolino.rocks
  
   Feel free to do whatever you want with it. Have fun!
   
*/

#include <Wire.h>
#include <SPI.h>
#include <Piccolino_OLED.h>
#include <Piccolino_RAM.h>
#include <SFE_BMP180.h>

// You will need to create an SFE_BMP180 object, here called "pressure":
SFE_BMP180 pressure;

// Piccolino OLED driver
Piccolino_OLED oled;
Piccolino_RAM ram;

//change the below ALTITUDE to your own location. In google, search for: altitude suburb,state (ie: altitude spring,texas)
//value must be in meters
#define ALTITUDE 37 // Spring, Texas is 37 meters (121ft)

// 4 images for the weather screen toggler
PROGMEM const unsigned char sunny [] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x81, 0x00, 0x00, 0x00,
0x00, 0x00, 0x01, 0xC3, 0xC3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xC3, 0xC3, 0x80, 0x00, 0x00,
0x00, 0x00, 0x81, 0xF7, 0xEF, 0x81, 0x00, 0x00, 0x00, 0x00, 0xC1, 0xF7, 0xEF, 0x83, 0x00, 0x00,
0x00, 0x00, 0x71, 0xFE, 0x7F, 0x8E, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x9E, 0x7B, 0xFE, 0x00, 0x00,
0x00, 0x00, 0x7F, 0x8E, 0x73, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x84, 0x21, 0xFE, 0x00, 0x00,
0x00, 0x20, 0x73, 0x80, 0x01, 0xCE, 0x04, 0x00, 0x00, 0x1F, 0xF0, 0x80, 0x01, 0x0F, 0xF8, 0x00,
0x00, 0x1F, 0xF0, 0x00, 0x00, 0x0F, 0xF0, 0x00, 0x00, 0x0F, 0xF0, 0x00, 0x00, 0x0F, 0xF0, 0x00,
0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00,
0x00, 0x07, 0x80, 0x00, 0x00, 0x01, 0xE0, 0x00, 0x00, 0x7F, 0x80, 0x00, 0x00, 0x01, 0xFE, 0x00,
0x01, 0xFF, 0x80, 0x00, 0x00, 0x03, 0xFF, 0x80, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x00,
0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x00,
0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x00, 0x03, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xC0,
0x07, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xE0, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00,
0x00, 0x7E, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00,
0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x00,
0x00, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x01, 0xFF, 0x80, 0x00, 0x00, 0x03, 0xFF, 0x00,
0x03, 0xFF, 0x80, 0x00, 0x00, 0x01, 0xFF, 0x80, 0x00, 0x0F, 0x80, 0x00, 0x00, 0x01, 0xF0, 0x00,
0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00,
0x00, 0x0F, 0xF0, 0x00, 0x00, 0x0F, 0xF0, 0x00, 0x00, 0x1F, 0xF0, 0x00, 0x00, 0x0F, 0xF0, 0x00,
0x00, 0x1F, 0xF0, 0x00, 0x00, 0x0F, 0xF8, 0x00, 0x00, 0x30, 0x73, 0x80, 0x01, 0xCE, 0x0C, 0x00,
0x00, 0x00, 0x77, 0x80, 0x21, 0xEE, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x8C, 0x73, 0xFE, 0x00, 0x00,
0x00, 0x00, 0x7F, 0x9E, 0x73, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x71, 0xFE, 0x7F, 0x9E, 0x00, 0x00,
0x00, 0x00, 0xE1, 0xF7, 0xFF, 0x86, 0x00, 0x00, 0x00, 0x00, 0x81, 0xF7, 0xEF, 0x81, 0x00, 0x00,
0x00, 0x00, 0x01, 0xC3, 0xC7, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0xC3, 0xC3, 0x80, 0x00, 0x00,
0x00, 0x00, 0x01, 0x81, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

PROGMEM const unsigned char partlycloudy [] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x61, 0x80, 0x00,
0x00, 0x00, 0x00, 0x00, 0x1C, 0xF3, 0x80, 0x00, 0x00, 0x00, 0x00, 0x02, 0x1C, 0xF7, 0x80, 0x00,
0x00, 0x00, 0x00, 0x03, 0x9F, 0xFF, 0x9C, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFB, 0xDD, 0xFC, 0x00,
0x00, 0x00, 0x00, 0x01, 0xFB, 0x99, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x01, 0xB8, 0x01, 0xF8, 0x20,
0x00, 0x00, 0x00, 0x39, 0x98, 0x01, 0x99, 0xC0, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x1F, 0xC0,
0x00, 0x00, 0x00, 0x1F, 0xC0, 0x00, 0x1F, 0xC0, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x03, 0x80,
0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x07, 0xC0, 0x00, 0x00, 0x03, 0xFE, 0x00, 0x00, 0x07, 0xF8,
0x00, 0x00, 0x00, 0xF8, 0x00, 0x00, 0x01, 0xF0, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0xF0,
0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x03, 0xC0,
0x00, 0x00, 0x03, 0xFF, 0x00, 0x00, 0x01, 0xF0, 0x00, 0x00, 0x0F, 0xFF, 0x80, 0x00, 0x00, 0xFC,
0x00, 0x00, 0x1F, 0xFF, 0xE0, 0x00, 0x00, 0xF8, 0x00, 0x00, 0x7F, 0xFF, 0xF0, 0x00, 0x03, 0xC0,
0x00, 0x00, 0x7C, 0x1F, 0xF0, 0x00, 0x03, 0xC0, 0x00, 0x00, 0xE0, 0x07, 0xFF, 0xF8, 0x00, 0xF0,
0x00, 0x00, 0xE0, 0x03, 0xFF, 0xFE, 0x00, 0x70, 0x00, 0x01, 0xC0, 0x01, 0xFF, 0xFF, 0x87, 0xF8,
0x00, 0x01, 0x80, 0x00, 0xFF, 0xFF, 0x87, 0xF8, 0x00, 0x01, 0x80, 0x00, 0x7F, 0xFF, 0xC3, 0x00,
0x00, 0x03, 0x80, 0x00, 0x7F, 0xFF, 0xFF, 0x80, 0x00, 0xFF, 0x80, 0x00, 0x3F, 0x1F, 0xFF, 0xC0,
0x03, 0xFF, 0x80, 0x00, 0x18, 0x07, 0xFF, 0xC0, 0x07, 0xEF, 0x80, 0x00, 0x10, 0x07, 0xFF, 0xE0,
0x0E, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xF0, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xF0,
0x18, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xF8, 0x18, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xF8,
0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xF8, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFC,
0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFC,
0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFC, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xF8,
0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0,
0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

PROGMEM const unsigned char cloudy [] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x03, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xC0, 0x00, 0x00, 0x00,
0x00, 0x00, 0x1F, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xF0, 0x00, 0x00, 0x00,
0x00, 0x00, 0x7C, 0x0F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x07, 0xFD, 0xF8, 0x00, 0x00,
0x00, 0x01, 0xE0, 0x01, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x01, 0xE0, 0x01, 0xFF, 0xFF, 0x80, 0x00,
0x00, 0x01, 0xC0, 0x00, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x01, 0x80, 0x00, 0x7F, 0xFF, 0xC0, 0x00,
0x00, 0x01, 0x80, 0x00, 0x7F, 0xFF, 0xE0, 0x00, 0x01, 0xFF, 0x80, 0x00, 0x3F, 0x0F, 0xFF, 0x80,
0x03, 0xFF, 0x80, 0x00, 0x3C, 0x0F, 0xFF, 0xC0, 0x0F, 0xC7, 0x80, 0x00, 0x10, 0x07, 0xFF, 0xF0,
0x0F, 0x01, 0x80, 0x00, 0x10, 0x07, 0xFF, 0xF0, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xF8,
0x1C, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xF8, 0x38, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFC,
0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFC, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFC,
0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFC, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFC,
0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFC, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFC,
0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8,
0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0,
0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

PROGMEM const unsigned char chancetstorms [] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x33, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x23, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0xFF, 0x60, 0x00,
0x00, 0x00, 0x00, 0x00, 0x1E, 0xDB, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x4B, 0xE0, 0x00,
0x00, 0x00, 0x00, 0xFF, 0xFA, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xF8, 0x00, 0x7C, 0x00,
0x00, 0x00, 0x07, 0xFF, 0xE0, 0x00, 0x18, 0x00, 0x00, 0x00, 0x0F, 0x99, 0xF0, 0x00, 0x3F, 0x00,
0x00, 0x00, 0x1C, 0x06, 0x78, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x38, 0x01, 0x3B, 0xF8, 0x0E, 0x00,
0x00, 0x00, 0x30, 0x00, 0x9F, 0xFC, 0x1C, 0x00, 0x00, 0x00, 0x60, 0x00, 0x5F, 0xFE, 0x07, 0x80,
0x00, 0x00, 0x60, 0x00, 0x6E, 0x0F, 0x07, 0x80, 0x00, 0x00, 0x60, 0x00, 0x2D, 0xF7, 0x9C, 0x00,
0x00, 0x0E, 0xE0, 0x00, 0x36, 0x3B, 0x9C, 0x00, 0x00, 0x7F, 0xE0, 0x00, 0x18, 0x0B, 0xFF, 0x00,
0x00, 0xFF, 0xE0, 0x00, 0x10, 0x07, 0xFF, 0x80, 0x01, 0xC0, 0x40, 0x00, 0x00, 0x07, 0xFF, 0x80,
0x03, 0x80, 0x00, 0x00, 0x00, 0x06, 0x13, 0xC0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFD, 0xC0,
0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0xE0, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0xE0,
0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0xE0, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0xE0,
0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0xE0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0xE0,
0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x19, 0xC0, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0,
0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x00,
0x00, 0x00, 0x30, 0x38, 0x1C, 0x1C, 0x0C, 0x00, 0x00, 0x00, 0x30, 0x38, 0x38, 0x18, 0x18, 0x00,
0x00, 0x00, 0x60, 0x70, 0x30, 0x38, 0x18, 0x00, 0x00, 0x00, 0x60, 0x70, 0x77, 0x30, 0x30, 0x00,
0x00, 0x00, 0xC0, 0xE0, 0xFF, 0x70, 0x30, 0x00, 0x00, 0x00, 0xC0, 0xE0, 0x7F, 0x60, 0x60, 0x00,
0x00, 0x00, 0x00, 0xE0, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x0C, 0x00, 0x00, 0x00,
0x00, 0x03, 0x01, 0xC6, 0x1D, 0x80, 0x80, 0x00, 0x00, 0x03, 0x03, 0xFF, 0x39, 0x81, 0xC0, 0x00,
0x00, 0x07, 0x03, 0xFE, 0x73, 0x81, 0x80, 0x00, 0x00, 0x06, 0x07, 0x06, 0x73, 0x03, 0x80, 0x00,
0x00, 0x0E, 0x06, 0x0E, 0xE7, 0x03, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x0D, 0xC6, 0x07, 0x00, 0x00,
0x00, 0x1C, 0x0C, 0x0D, 0x8E, 0x06, 0x00, 0x00, 0x00, 0x18, 0x18, 0x1F, 0x8C, 0x0E, 0x00, 0x00,
0x00, 0x18, 0x18, 0x1F, 0x0C, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x60, 0x3C, 0x30, 0x30, 0x00, 0x00,
0x00, 0xE0, 0x60, 0x78, 0x70, 0x30, 0x00, 0x00, 0x00, 0xC0, 0xE0, 0x70, 0x60, 0x70, 0x00, 0x00,
0x01, 0xC0, 0xC0, 0xE0, 0x60, 0x60, 0x00, 0x00, 0x01, 0x81, 0xC0, 0xE0, 0xC0, 0xE0, 0x00, 0x00,
0x03, 0x81, 0x81, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x03, 0x03, 0x81, 0x81, 0x81, 0xC0, 0x00, 0x00,
0x07, 0x03, 0x03, 0x81, 0x81, 0x80, 0x00, 0x00, 0x02, 0x03, 0x03, 0x01, 0x01, 0x80, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

double T,P,p0,p1;
int looper=0;
byte local_buff[129];


// ---------------------------------- peogram starts here ----------------------------------------------

void drawBitmap(int16_t x, int16_t y, const unsigned char *bitmap, int16_t w, int16_t h) 
{
  int16_t i, j, byteWidth = (w + 7) / 8;
  for(j=0; j<h; j++) {
    for(i=0; i<w; i++ ) {
      if(pgm_read_byte(bitmap + j * byteWidth + i / 8) & (128 >> (i & 7))) {
        oled.drawPixel(x+i, y+j, WHITE);
      }
    }
  } 
}

void ShowTemp(char x,char y) 
{
      oled.setCursor(x-36,y);
      oled.setTextSize(3);
      oled.print(round((9.0/5.0)*T+32.0)); // don't print decimals
      oled.setCursor(x,y+1);
      oled.setTextSize(1);
      oled.println("F");
}

void setup()
{

  //power sensor via A2 (just above 3v is enough)
  pinMode(A2,OUTPUT);
  digitalWrite(A2,HIGH);
  
  ram.begin();  
  memset(local_buff,0,128);
  ram.write(0,local_buff,128);
  
  oled.begin();
  oled.clear();
  oled.print(F("Init..."));
  oled.update();
  
  // Initialize the sensor (it is important to get calibration values stored on the device).

  if (pressure.begin()) {
    oled.println(F("Ok!"));
    oled.update();
  }  else
  {
    // Oops, something went wrong, this is usually a connection problem,
    // see the comments at the top of this sketch for the proper connections.

    oled.println(F("FAILED"));
    oled.update();
    while(1)
      delay(10000); // Pause forever.
  }
  Serial.begin(9600);
}

void loop()
{
  char status;
  char p2;

  oled.clear();

  // You must first get a temperature measurement to perform a pressure reading.
 
  // Start a temperature measurement:
  // If request is successful, the number of ms to wait is returned.
  // If request is unsuccessful, 0 is returned.

  status = pressure.startTemperature();
  if (status != 0)
  {
    // Wait for the measurement to complete:
    delay(status);

    // Retrieve the completed temperature measurement:
    // Note that the measurement is stored in the variable T.
    // Function returns 1 if successful, 0 if failure.
    
    if (pressure.getTemperature(T))
        ShowTemp(36,0);  

  }
  
      if (status = pressure.startPressure(3))
      {
        // Wait for the measurement to complete:
        delay(status);

        // Retrieve the completed pressure measurement:
        // Note that the measurement is stored in the variable P.
        // Note also that the function requires the previous temperature measurement (T).
        // (If temperature is stable, you can do one temperature measurement for a number of pressure measurements.)
        // Function returns 1 if successful, 0 if failure.

        // The pressure sensor returns abolute pressure, which varies with altitude.
        // To remove the effects of altitude, use the sealevel function and your current altitude.
        // This number is commonly used in weather reports.

        if (pressure.getPressure(P,T))
        {
          // Print out the measurement:
          oled.setCursor(55,0);
          oled.setTextSize(2);
          
          p0 = pressure.sealevel(P,ALTITUDE); // corrected for your actual altitude
          p0*=0.0295333727;
          
          oled.print(p0);
          oled.setTextSize(1);
          oled.setCursor(114,8);
          oled.println(F("in"));
          
          oled.setCursor(60,19);
          oled.print(p0,2);
          oled.print(F(" mb"));

        }
      }

      // draw legend
      oled.setCursor(0,36);
      oled.print(F("    RAIN      FAIR"));
      oled.setCursor(0,56);
      oled.print(F("STORM   CHANGE   DRY"));
      
      p1=p0-28; // p0 = inHg - min of scale   (typical barometer range is 27.8 - 31.2 but we just track top part for better visualization on the graph)      
      p1*=10; // range is now 32 max
      p2=round(p1*100/32); // get percent of bar to be filled based on 128 pixels width 
      oled.fillRect(0,48,p2,5,WHITE); // draw bar

      // separation line in the middle of the screen
      oled.drawLine(0,32,127,32,WHITE);
      
      oled.update();  
      
      delay(1000); //wait 1 sec

      looper++;

     if(!(looper%300)) { // update history every 10 minutes (since we pause for 10 seconds every 10 seconds we only count 300 seconds)
       ram.read(1,local_buff,127); // skip first location
       local_buff[127]=14+(50-round(p2/2)); // scale output so that low pressure dips the graph down.
       ram.write(0,local_buff,128); //keep the last 24 hours approx  (60*60*24)/128 pixels is about 11 minutes per dot
       looper=0;
     }
     
     if(!(looper%10)) { // rotate screens every 10 seconds
       unsigned char f;       
       oled.clear();
       
       for(f=0; f<128; f++)
         oled.drawPixel(f,local_buff[f],WHITE);
         
       oled.setCursor(43,0);
       oled.setTextSize(1);
       oled.print("HISTORY");
       oled.setCursor(0,10);
       oled.print("SUNNY");
       oled.setCursor(0,54);
       oled.print("STORMY");
       oled.update();
       delay(5000);
       
       oled.clear();
       if(p0<28.7)            drawBitmap(64,0,chancetstorms,64,64);   
       if(p0>28.69&&p0<29.5)  drawBitmap(64,0,partlycloudy,64,64);
       if(p0>29.49&&p0<30.5)  drawBitmap(64,0,cloudy,64,64);
       if(p0>30.49)           drawBitmap(64,0,sunny,64,64);
       ShowTemp(50,20);  
       oled.update();
       delay(5000);
     }     
}

