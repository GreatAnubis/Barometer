/*
   barometer.ino - Piccolino Pressure & Temperature display using the BMP180 sensor add-on
   Visit http://piccolino.rocks to get this low cost sensor and add it to your Piccolino!
   
   This demo uses Sparkfun's SFE_BMP180 library ( https://github.com/sparkfun/BMP180_Breakout/tree/master/Libraries/Arduino/src )
   
   To install the library, make a folder called SFE_BMP180 in your ... Arduino/libraries 
   go into the folder and drop the SFE_BMP180.cpp and SFE_BMP180.h files. Restart the Arduino IDE and compile this demo.
   
   Written by Alex Sardo (wctek.com) for Piccolino -> http://piccolino.rocks
  
   Feel free to do whatever you want with it. Have fun!
   
*/

#include <Wire.h>
#include <SPI.h>
#include <Piccolino_OLED.h>
#include <Piccolino_RAM.h>
#include "DHT.h"

#define DHTPIN A0     // what pin we're connected to
#define DHTTYPE DHT11   // DHT 11
DHT dht(DHTPIN, DHTTYPE);
//#include <SFE_BMP180.h>

// You will need to create an SFE_BMP180 object, here called "pressure":
//SFE_BMP180 pressure;

// Piccolino OLED driver
Piccolino_OLED oled;
Piccolino_RAM ram;

//change the below ALTITUDE to your own location. In google, search for: altitude suburb,state (ie: altitude spring,texas)
//value must be in meters
#define ALTITUDE 37 // Spring, Texas is 37 meters (121ft)

// 4 images for the weather screen toggler
PROGMEM const unsigned char sunny [] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x81, 0x00, 0x00, 0x00,
0x00, 0x00, 0x01, 0xC3, 0xC3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xC3, 0xC3, 0x80, 0x00, 0x00,
0x00, 0x00, 0x81, 0xF7, 0xEF, 0x81, 0x00, 0x00, 0x00, 0x00, 0xC1, 0xF7, 0xEF, 0x83, 0x00, 0x00,
0x00, 0x00, 0x71, 0xFE, 0x7F, 0x8E, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x9E, 0x7B, 0xFE, 0x00, 0x00,
0x00, 0x00, 0x7F, 0x8E, 0x73, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x84, 0x21, 0xFE, 0x00, 0x00,
0x00, 0x20, 0x73, 0x80, 0x01, 0xCE, 0x04, 0x00, 0x00, 0x1F, 0xF0, 0x80, 0x01, 0x0F, 0xF8, 0x00,
0x00, 0x1F, 0xF0, 0x00, 0x00, 0x0F, 0xF0, 0x00, 0x00, 0x0F, 0xF0, 0x00, 0x00, 0x0F, 0xF0, 0x00,
0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00,
0x00, 0x07, 0x80, 0x00, 0x00, 0x01, 0xE0, 0x00, 0x00, 0x7F, 0x80, 0x00, 0x00, 0x01, 0xFE, 0x00,
0x01, 0xFF, 0x80, 0x00, 0x00, 0x03, 0xFF, 0x80, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x00,
0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x00,
0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x00, 0x03, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xC0,
0x07, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xE0, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00,
0x00, 0x7E, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00,
0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x00,
0x00, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x01, 0xFF, 0x80, 0x00, 0x00, 0x03, 0xFF, 0x00,
0x03, 0xFF, 0x80, 0x00, 0x00, 0x01, 0xFF, 0x80, 0x00, 0x0F, 0x80, 0x00, 0x00, 0x01, 0xF0, 0x00,
0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00,
0x00, 0x0F, 0xF0, 0x00, 0x00, 0x0F, 0xF0, 0x00, 0x00, 0x1F, 0xF0, 0x00, 0x00, 0x0F, 0xF0, 0x00,
0x00, 0x1F, 0xF0, 0x00, 0x00, 0x0F, 0xF8, 0x00, 0x00, 0x30, 0x73, 0x80, 0x01, 0xCE, 0x0C, 0x00,
0x00, 0x00, 0x77, 0x80, 0x21, 0xEE, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x8C, 0x73, 0xFE, 0x00, 0x00,
0x00, 0x00, 0x7F, 0x9E, 0x73, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x71, 0xFE, 0x7F, 0x9E, 0x00, 0x00,
0x00, 0x00, 0xE1, 0xF7, 0xFF, 0x86, 0x00, 0x00, 0x00, 0x00, 0x81, 0xF7, 0xEF, 0x81, 0x00, 0x00,
0x00, 0x00, 0x01, 0xC3, 0xC7, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0xC3, 0xC3, 0x80, 0x00, 0x00,
0x00, 0x00, 0x01, 0x81, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

PROGMEM const unsigned char partlycloudy [] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x61, 0x80, 0x00,
0x00, 0x00, 0x00, 0x00, 0x1C, 0xF3, 0x80, 0x00, 0x00, 0x00, 0x00, 0x02, 0x1C, 0xF7, 0x80, 0x00,
0x00, 0x00, 0x00, 0x03, 0x9F, 0xFF, 0x9C, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFB, 0xDD, 0xFC, 0x00,
0x00, 0x00, 0x00, 0x01, 0xFB, 0x99, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x01, 0xB8, 0x01, 0xF8, 0x20,
0x00, 0x00, 0x00, 0x39, 0x98, 0x01, 0x99, 0xC0, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x1F, 0xC0,
0x00, 0x00, 0x00, 0x1F, 0xC0, 0x00, 0x1F, 0xC0, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x03, 0x80,
0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x07, 0xC0, 0x00, 0x00, 0x03, 0xFE, 0x00, 0x00, 0x07, 0xF8,
0x00, 0x00, 0x00, 0xF8, 0x00, 0x00, 0x01, 0xF0, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0xF0,
0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x03, 0xC0,
0x00, 0x00, 0x03, 0xFF, 0x00, 0x00, 0x01, 0xF0, 0x00, 0x00, 0x0F, 0xFF, 0x80, 0x00, 0x00, 0xFC,
0x00, 0x00, 0x1F, 0xFF, 0xE0, 0x00, 0x00, 0xF8, 0x00, 0x00, 0x7F, 0xFF, 0xF0, 0x00, 0x03, 0xC0,
0x00, 0x00, 0x7C, 0x1F, 0xF0, 0x00, 0x03, 0xC0, 0x00, 0x00, 0xE0, 0x07, 0xFF, 0xF8, 0x00, 0xF0,
0x00, 0x00, 0xE0, 0x03, 0xFF, 0xFE, 0x00, 0x70, 0x00, 0x01, 0xC0, 0x01, 0xFF, 0xFF, 0x87, 0xF8,
0x00, 0x01, 0x80, 0x00, 0xFF, 0xFF, 0x87, 0xF8, 0x00, 0x01, 0x80, 0x00, 0x7F, 0xFF, 0xC3, 0x00,
0x00, 0x03, 0x80, 0x00, 0x7F, 0xFF, 0xFF, 0x80, 0x00, 0xFF, 0x80, 0x00, 0x3F, 0x1F, 0xFF, 0xC0,
0x03, 0xFF, 0x80, 0x00, 0x18, 0x07, 0xFF, 0xC0, 0x07, 0xEF, 0x80, 0x00, 0x10, 0x07, 0xFF, 0xE0,
0x0E, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xF0, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xF0,
0x18, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xF8, 0x18, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xF8,
0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xF8, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFC,
0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFC,
0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFC, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xF8,
0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0,
0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

PROGMEM const unsigned char cloudy [] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x03, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xC0, 0x00, 0x00, 0x00,
0x00, 0x00, 0x1F, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xF0, 0x00, 0x00, 0x00,
0x00, 0x00, 0x7C, 0x0F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x07, 0xFD, 0xF8, 0x00, 0x00,
0x00, 0x01, 0xE0, 0x01, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x01, 0xE0, 0x01, 0xFF, 0xFF, 0x80, 0x00,
0x00, 0x01, 0xC0, 0x00, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x01, 0x80, 0x00, 0x7F, 0xFF, 0xC0, 0x00,
0x00, 0x01, 0x80, 0x00, 0x7F, 0xFF, 0xE0, 0x00, 0x01, 0xFF, 0x80, 0x00, 0x3F, 0x0F, 0xFF, 0x80,
0x03, 0xFF, 0x80, 0x00, 0x3C, 0x0F, 0xFF, 0xC0, 0x0F, 0xC7, 0x80, 0x00, 0x10, 0x07, 0xFF, 0xF0,
0x0F, 0x01, 0x80, 0x00, 0x10, 0x07, 0xFF, 0xF0, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xF8,
0x1C, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xF8, 0x38, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFC,
0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFC, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFC,
0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFC, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFC,
0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFC, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFC,
0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8,
0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0,
0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

PROGMEM const unsigned char chancetstorms [] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x33, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x23, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0xFF, 0x60, 0x00,
0x00, 0x00, 0x00, 0x00, 0x1E, 0xDB, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x4B, 0xE0, 0x00,
0x00, 0x00, 0x00, 0xFF, 0xFA, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xF8, 0x00, 0x7C, 0x00,
0x00, 0x00, 0x07, 0xFF, 0xE0, 0x00, 0x18, 0x00, 0x00, 0x00, 0x0F, 0x99, 0xF0, 0x00, 0x3F, 0x00,
0x00, 0x00, 0x1C, 0x06, 0x78, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x38, 0x01, 0x3B, 0xF8, 0x0E, 0x00,
0x00, 0x00, 0x30, 0x00, 0x9F, 0xFC, 0x1C, 0x00, 0x00, 0x00, 0x60, 0x00, 0x5F, 0xFE, 0x07, 0x80,
0x00, 0x00, 0x60, 0x00, 0x6E, 0x0F, 0x07, 0x80, 0x00, 0x00, 0x60, 0x00, 0x2D, 0xF7, 0x9C, 0x00,
0x00, 0x0E, 0xE0, 0x00, 0x36, 0x3B, 0x9C, 0x00, 0x00, 0x7F, 0xE0, 0x00, 0x18, 0x0B, 0xFF, 0x00,
0x00, 0xFF, 0xE0, 0x00, 0x10, 0x07, 0xFF, 0x80, 0x01, 0xC0, 0x40, 0x00, 0x00, 0x07, 0xFF, 0x80,
0x03, 0x80, 0x00, 0x00, 0x00, 0x06, 0x13, 0xC0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFD, 0xC0,
0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0xE0, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0xE0,
0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0xE0, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0xE0,
0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0xE0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0xE0,
0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x19, 0xC0, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0,
0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x00,
0x00, 0x00, 0x30, 0x38, 0x1C, 0x1C, 0x0C, 0x00, 0x00, 0x00, 0x30, 0x38, 0x38, 0x18, 0x18, 0x00,
0x00, 0x00, 0x60, 0x70, 0x30, 0x38, 0x18, 0x00, 0x00, 0x00, 0x60, 0x70, 0x77, 0x30, 0x30, 0x00,
0x00, 0x00, 0xC0, 0xE0, 0xFF, 0x70, 0x30, 0x00, 0x00, 0x00, 0xC0, 0xE0, 0x7F, 0x60, 0x60, 0x00,
0x00, 0x00, 0x00, 0xE0, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x0C, 0x00, 0x00, 0x00,
0x00, 0x03, 0x01, 0xC6, 0x1D, 0x80, 0x80, 0x00, 0x00, 0x03, 0x03, 0xFF, 0x39, 0x81, 0xC0, 0x00,
0x00, 0x07, 0x03, 0xFE, 0x73, 0x81, 0x80, 0x00, 0x00, 0x06, 0x07, 0x06, 0x73, 0x03, 0x80, 0x00,
0x00, 0x0E, 0x06, 0x0E, 0xE7, 0x03, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x0D, 0xC6, 0x07, 0x00, 0x00,
0x00, 0x1C, 0x0C, 0x0D, 0x8E, 0x06, 0x00, 0x00, 0x00, 0x18, 0x18, 0x1F, 0x8C, 0x0E, 0x00, 0x00,
0x00, 0x18, 0x18, 0x1F, 0x0C, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x60, 0x3C, 0x30, 0x30, 0x00, 0x00,
0x00, 0xE0, 0x60, 0x78, 0x70, 0x30, 0x00, 0x00, 0x00, 0xC0, 0xE0, 0x70, 0x60, 0x70, 0x00, 0x00,
0x01, 0xC0, 0xC0, 0xE0, 0x60, 0x60, 0x00, 0x00, 0x01, 0x81, 0xC0, 0xE0, 0xC0, 0xE0, 0x00, 0x00,
0x03, 0x81, 0x81, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x03, 0x03, 0x81, 0x81, 0x81, 0xC0, 0x00, 0x00,
0x07, 0x03, 0x03, 0x81, 0x81, 0x80, 0x00, 0x00, 0x02, 0x03, 0x03, 0x01, 0x01, 0x80, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

double T,P,p0,p1;
int looper=0;
byte local_buff[129];

// ---------------------------------- peogram starts here ----------------------------------------------

void drawBitmap(int16_t x, int16_t y, const unsigned char *bitmap, int16_t w, int16_t h) 
{
  int16_t i, j, byteWidth = (w + 7) / 8;
  for(j=0; j<h; j++) {
    for(i=0; i<w; i++ ) {
      if(pgm_read_byte(bitmap + j * byteWidth + i / 8) & (128 >> (i & 7))) {
        oled.drawPixel(x+i, y+j, WHITE);
      }
    }
  } 
}

void ShowTemp(char x,char y) 
{
      oled.setCursor(x-36,y);
      oled.setTextSize(3);
      oled.print(round(T)); // don't print decimals
      oled.setCursor(x,y+1);
      oled.setTextSize(1);
      oled.println("C");
}

void setup()
{

  //power sensor via A2 (just above 3v is enough)
  pinMode(A2,OUTPUT);
  digitalWrite(A2,HIGH);

  oled.begin();
  oled.clear();
  oled.print(F("Init..."));
  // Initialize the sensor (it is important to get calibration values stored on the device).
  dht.begin();
  oled.update();
  delay(2000);
  oled.println(F("Ok!"));
  oled.update();
  Serial.begin(9600);
}
float h ;
float t;
float hic ;
void loop()
{
    Serial.print(F("LOOP\n"));
    oled.clear();
    // Wait for the measurement to complete:
    delay(1000);
  //  Serial.print(F("READING TEMP\n"));
    T = dht.readTemperature();
//    Serial.print(F("READ TEMP!\n"));
    ShowTemp(36,0);  
    delay(1000);
    h = dht.readHumidity();
    if (!isnan(h) && !isnan(T)) 
    {
      hic = dht.computeHeatIndex(T, h, false);// * 1.5;
      Serial.print(F("Humidity: "));
      Serial.print(h);
      Serial.print(F("\n"));
      Serial.print(F("Temperature: "));
      Serial.print(T);
      Serial.print(F(" *C \n"));
      // Print out the measurement:
      oled.setCursor(55,0);
      oled.setTextSize(2);
      oled.print(h);
      oled.setTextSize(1);
      oled.setCursor(114,8);
      oled.println(F("%"));

      oled.setCursor(60,19);
      oled.print(hic);
      oled.print(F(" heat"));
      oled.fillRect(0,48,h,5,WHITE); // draw bar
      oled.setCursor(h+2,45);
      oled.setTextSize(1);
      oled.print("Temp");
      
      oled.fillRect(0,54,T,5,WHITE); // draw bar
      oled.setCursor(T+2,53);
      oled.setTextSize(1);
      oled.print("Wilg");

      // separation line in the middle of the screen
      oled.drawLine(0,32,127,32,WHITE);
      oled.update();  
      delay(1000); //wait 1 sec
      looper++;
     
     if(!(looper%10)) 
     { // rotate screens every 10 seconds
         oled.clear();
//       if(p0<28.7)            drawBitmap(64,0,chancetstorms,64,64);   
//       if(p0>28.69&&p0<29.5)  drawBitmap(64,0,partlycloudy,64,64);
//       if(p0>29.49&&p0<30.5)  drawBitmap(64,0,cloudy,64,64);
       if(T>24.00)           drawBitmap(64,0,sunny,64,64);
       ShowTemp(50,20);  
       oled.update();
       delay(5000);
     }     
    }
}